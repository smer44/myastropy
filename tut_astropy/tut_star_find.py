import glob
import numpy as np
import matplotlib.pyplot as plt
from astropy.io import fits
import matplotlib.animation as ani

path = "img/test/2021-05-26_01-05-44_C_-30.96_60.00s_0004.fits"

file = glob.glob(path)
print(file)
data = fits.open(file[0])[0].data

dmax = np.max(data)
dmin = np.min(data)

flat_trashhold = (dmax-dmin)*0.5

#data_ids = data < flat_trashhold
#data[data_ids] = 0

def intersect (a,b,c,d):
    return a<=d and c<=b

def combine_row_stars(rows):
    len_rows = len(rows)
    known_stars = []
    prev_y = 0
    current_stars = []
    for y, row_list in rows:
        next_stars = []
        if y == prev_y+1:

            for n  in range(len(current_stars)):
                y0, x0_known, x1_known = current_stars[n]
                for m in range(len(row_list)):
                    row_list_entry = row_list[m]
                    if row_list_entry:
                        x0, x1 = row_list_entry
                        #print("row_list_entry:" , x0, x1 )
                        if intersect(x0,x1 ,x0_known,x1_known ):
                            next_stars.append([y0,min(x0,x0_known) , max (x1,x1_known)])
                            row_list[m] = None
                            current_stars[n]= None
                            break


        for new_star_entry in row_list:
             if new_star_entry:
                x0, x1 = new_star_entry
                next_stars.append([y,x0,x1])

        for old_star_entry in current_stars:
            if old_star_entry:
                y0, x0_known, x1_known = old_star_entry
                known_stars.append([y0, prev_y, x0_known, x1_known])


        current_stars = next_stars
        prev_y = y


    for entry in current_stars:
        if entry:
            y0, x0_known, x1_known = entry
            known_stars.append([y0, prev_y, x0_known, x1_known])

    return known_stars





def row_stars_select(data, flat_trashhold):
    startx, starty = 0,0
    #startx, starty = 2860,1728,
    maxy,maxx = data.shape
    #maxx, maxy = 2890,1742,
    #print(maxx,maxy)
    rows = []
    for y in range(starty, maxy):
        if y % 100 == 0:
            print("pricessing row :" , y )
        x = startx
        row = data[y]
        row_stars = []
        while x < maxx:
            #print(row[x], flat_trashhold)
            while x < maxx and row[x] <flat_trashhold:
                x+=1
            if x >= maxx:
                continue
            star_x0 = x
            while x < maxx and row[x] > flat_trashhold:
                x += 1
                star_x1 = x
            row_stars.append((star_x0, star_x1))
        if row_stars:
            rows.append((y,row_stars))
    return rows





#print(dmax,dmin)

rows = row_stars_select(data,flat_trashhold)
#rows = [(505, [(891, 893)]), (506, [(891, 893)]), (666, [(503, 505)]), (667, [(502, 506)]), (668, [(501, 507)]), (669, [(501, 507), (624, 628)]), (670, [(501, 506), (623, 630)]), (671, [(501, 506), (623, 630)]), (672, [(502, 505), (623, 630)]), (673, [(623, 630)]), (674, [(623, 630)]), (675, [(623, 630)]), (676, [(623, 629)]), (677, [(624, 628)]), (750, [(1125, 1128)]), (751, [(1124, 1128)]), (752, [(1124, 1128)]), (753, [(1125, 1128)]), (909, [(1759, 1762)]), (910, [(1759, 1762)]), (911, [(1760, 1762)]), (1020, [(1436, 1437)]), (1021, [(1435, 1438)]), (1022, [(1435, 1438)]), (1023, [(1436, 1437)]), (1080, [(1731, 1733)]), (1081, [(1731, 1734)]), (1082, [(1569, 1571), (1731, 1734)]), (1083, [(391, 394), (1568, 1572)]), (1084, [(390, 395), (1568, 1572)]), (1085, [(390, 396), (1569, 1571)]), (1086, [(390, 396)]), (1087, [(390, 395)]), (1088, [(391, 395)]), (1089, [(391, 394)]), (1129, [(1293, 1295)]), (1130, [(1293, 1295)]), (1172, [(1610, 1612)]), (1173, [(1610, 1613)]), (1174, [(1611, 1614)]), (1175, [(1613, 1614)]), (1176, [(1614, 1615)]), (1177, [(1614, 1615)]), (1178, [(1550, 1551)]), (1179, [(1549, 1552)]), (1180, [(1548, 1552)]), (1181, [(1548, 1552)]), (1182, [(1549, 1552)]), (1183, [(1549, 1551), (1654, 1656)]), (1184, [(1653, 1657)]), (1185, [(1653, 1657)]), (1186, [(1653, 1657)]), (1187, [(1654, 1656)]), (1188, [(1666, 1669)]), (1189, [(1666, 1670)]), (1190, [(1509, 1511), (1666, 1670)]), (1191, [(1509, 1511), (1666, 1669)]), (1192, [(1667, 1668)]), (1202, [(3269, 3278)]), (1203, [(3267, 3281)]), (1204, [(3265, 3282)]), (1205, [(3263, 3283)]), (1206, [(3261, 3284)]), (1207, [(3260, 3285)]), (1208, [(3259, 3286)]), (1209, [(3259, 3286)]), (1210, [(3259, 3286)]), (1211, [(3258, 3286)]), (1212, [(3258, 3286)]), (1213, [(3258, 3286)]), (1214, [(3258, 3285)]), (1215, [(3259, 3285)]), (1216, [(3259, 3285)]), (1217, [(3260, 3284)]), (1218, [(3261, 3284)]), (1219, [(3262, 3283)]), (1220, [(3263, 3282)]), (1221, [(3264, 3281)]), (1222, [(3265, 3280)]), (1223, [(3267, 3279)]), (1224, [(3268, 3278)]), (1225, [(3270, 3276)]), (1236, [(1649, 1650)]), (1237, [(1649, 1651)]), (1241, [(1612, 1614)]), (1242, [(1611, 1615), (1817, 1820)]), (1243, [(1610, 1615), (1817, 1820)]), (1244, [(1609, 1615), (1817, 1820)]), (1245, [(1609, 1614), (1818, 1819)]), (1246, [(1609, 1613)]), (1247, [(1609, 1612)]), (1248, [(1610, 1611)]), (1252, [(1635, 1638)]), (1253, [(1635, 1639)]), (1254, [(1635, 1639)]), (1255, [(1530, 1531), (1635, 1638)]), (1256, [(1529, 1532)]), (1257, [(1529, 1532)]), (1264, [(1544, 1548)]), (1265, [(1544, 1548)]), (1266, [(1544, 1548), (1625, 1627)]), (1267, [(1544, 1548)]), (1268, [(1544, 1547)]), (1269, [(1544, 1546)]), (1289, [(1600, 1601)]), (1290, [(1600, 1601)]), (1301, [(1594, 1595)]), (1312, [(1788, 1790)]), (1313, [(1788, 1791)]), (1314, [(1788, 1791)]), (1315, [(1789, 1790)]), (1317, [(1541, 1544)]), (1318, [(1541, 1544)]), (1319, [(1541, 1544)]), (1320, [(1542, 1543)]), (1338, [(1862, 1863)]), (1339, [(1861, 1865), (2670, 2674)]), (1340, [(1861, 1865), (2669, 2675)]), (1341, [(1861, 1865), (2669, 2675)]), (1342, [(1861, 1864), (2669, 2675)]), (1343, [(1646, 1648), (2670, 2674)]), (1344, [(1646, 1648)]), (1345, [(1646, 1648)]), (1349, [(1398, 1399)]), (1350, [(1398, 1400)]), (1375, [(1499, 1502)]), (1376, [(1499, 1503)]), (1377, [(1499, 1502)]), (1378, [(1500, 1502)]), (1411, [(703, 707)]), (1412, [(702, 708)]), (1413, [(702, 708)]), (1414, [(702, 708)]), (1415, [(702, 708)]), (1416, [(702, 708)]), (1417, [(703, 707)]), (1418, [(703, 705)]), (1461, [(885, 889)]), (1462, [(884, 890)]), (1463, [(884, 891)]), (1464, [(884, 891)]), (1465, [(884, 891)]), (1466, [(884, 890)]), (1467, [(885, 889)]), (1468, [(885, 888)]), (1516, [(1567, 1568)]), (1517, [(1567, 1569)]), (1518, [(1567, 1569)]), (1545, [(1787, 1788)]), (1546, [(1787, 1788)]), (1575, [(1376, 1379)]), (1576, [(1376, 1379)]), (1577, [(1376, 1379)]), (1578, [(1377, 1378)]), (1746, [(2999, 3000)]), (2039, [(2206, 2209)]), (2040, [(2205, 2209)]), (2041, [(2206, 2209)]), (2042, [(2206, 2208)]), (2185, [(2199, 2201)]), (2186, [(2199, 2202)]), (2187, [(2199, 2201)])]

print("rows:",rows)
#print("DATA:",np.max(data[1720:1745,2086:2880]))

knowns = combine_row_stars(rows)

print("knowns :", knowns)

ramkafill = dmax
rd=20
for (y0,y1,x0,x1) in knowns:
    y0, y1, x0, x1 = y0-rd,y1+rd,x0-rd,x1+rd
    data[y0,x0:x1] = ramkafill
    data[y1, x0:x1] = ramkafill
    data[y0:y1, x0] = ramkafill
    data[y0:y1, x1] = ramkafill


fig = plt.figure()
im = plt.imshow(data, cmap = "gray")
plt.colorbar()
plt.show()

#print(data)


